class BetaTransformer(nn.Module):
    def __init__(
        self, input_dim, d_model=64, nhead=4, num_encoder_layers=2,
        dim_feedforward=128, lookback=256, dropout=0.1
    ):
        super(BetaTransformer, self).__init__()
        
        # Transformer setup
        self.input_projection = nn.Linear(input_dim, d_model)  # Project input features to d_model
        self.positional_encoding = PositionalEncoding(d_model)  # Positional encoding

        self.encoder_layer = nn.TransformerEncoderLayer(
            d_model=d_model, nhead=nhead,
            dim_feedforward=dim_feedforward,
            dropout=dropout, batch_first=True
        )
        self.transformer_encoder = nn.TransformerEncoder(
            self.encoder_layer, num_layers=num_encoder_layers
        )

        # Output layers for weights, mu, and log_sigma_diag
        self.fc_out = nn.Linear(d_model, lookback)  # Output weights for each time step
        self.fc_mu = nn.Linear(d_model, 1)  # Compute mu from final output
        self.fc_log_sigma_diag = nn.Linear(d_model, 1)  # Compute log_sigma_diag from final output

    def forward(self, input_batch, return_weights=False):
        batch_size, seq_len, input_dim = input_batch.size()
        assert input_dim == 2, "Input must have two features: Apple and SP500 returns."

        apple_returns = input_batch[:, :, 0]  # Shape: (batch_size, lookback)
        sp500_returns = input_batch[:, :, 1]  # Shape: (batch_size, lookback)

        # Transformer Encoding
        x = self.input_projection(input_batch)  # Shape: (batch_size, lookback, d_model)
        x = self.positional_encoding(x)  # Add positional encoding
        transformer_output = self.transformer_encoder(x)  # Shape: (batch_size, lookback, d_model)

        final_output = transformer_output[:, -1, :]  # Shape: (batch_size, d_model)

        # Compute dynamic weights W
        transformer_weights = self.fc_out(final_output)  # Shape: (batch_size, lookback)
        W = F.softplus(transformer_weights)  # Ensure weights are positive

        # Compute mu and sigma_diag dynamically
        mu = self.fc_mu(final_output)  # Shape: (batch_size, 1)
        log_sigma_diag = self.fc_log_sigma_diag(final_output)  # Shape: (batch_size, 1)
        sigma_diag = torch.exp(log_sigma_diag)  # Ensure positivity
        sigma_inv = 1.0 / sigma_diag  # Shape: (batch_size, 1)

        # Prepare data for matrix operations
        X = sp500_returns.unsqueeze(-1)  # Shape: (batch_size, lookback, 1)
        y = apple_returns.unsqueeze(-1)  # Shape: (batch_size, lookback, 1)
        W_expanded = W.unsqueeze(-1)  # Shape: (batch_size, lookback, 1)

        # Weighted observations
        WX = W_expanded * X  # Element-wise multiplication
        Wy = W_expanded * y

        # Compute sufficient statistics
        X_T_WX = torch.bmm(X.transpose(1, 2), WX).squeeze(-1)  # Shape: (batch_size, 1)
        X_T_Wy = torch.bmm(X.transpose(1, 2), Wy).squeeze(-1)  # Shape: (batch_size, 1)

        # Compute posterior parameters
        S = sigma_inv + X_T_WX  # Shape: (batch_size, 1)
        Sigma_inv_mu = sigma_inv * mu  # Shape: (batch_size, 1)
        b = Sigma_inv_mu + X_T_Wy  # Shape: (batch_size, 1)

        # Posterior mean of beta
        beta = b / S  # Shape: (batch_size, 1)

        if return_weights:
            return W, beta  # Return both W and beta
        else:
            return beta  # Return only beta

model = BetaTransformer(input_dim=2, lookback=256)
batch_size = 32
lookback = 256
input_batch = torch.randn(batch_size, lookback, 2)  # Random data for testing
beta = model(input_batch)
print(beta.shape)  # Should output: torch.Size([32, 1])


def train_model_on_returns(model, data, optimizer, epochs, batch_size, lookback, num_sequences):
    for epoch in range(epochs):
        model.train()
        train_loss = 0.0
        train_loader = prepare_dataloader(
            data, num_sequences=num_sequences, batch_size=batch_size,
            lookback=lookback, shuffle=True
        )
        
        for batch_idx, batch in enumerate(train_loader):
            batch = batch[0]
            input_batch = batch[:, :lookback, :]  # Shape: (batch_size, lookback, 2)
            apple_return_next_day = batch[:, lookback, 0]   # Shape: (batch_size,)
            sp500_return_next_day = batch[:, lookback, 1]   # Shape: (batch_size,)
            
            optimizer.zero_grad()
            
            # Forward pass
            beta = model(input_batch)  # Shape: (batch_size, 1)
            
            # Predict Apple return for the next day
            predicted_apple_return = beta.squeeze() * sp500_return_next_day  # Shape: (batch_size,)
            
            # Compute loss
            mse_loss = torch.nn.MSELoss()
            loss = mse_loss(predicted_apple_return, apple_return_next_day)
            
            # Backward pass and optimization
            loss.backward()
            optimizer.step()
            
            train_loss += loss.item()
        
        avg_train_loss = train_loss / len(train_loader)
        print(f"Epoch {epoch+1}, Train Loss: {avg_train_loss:.6f}")

def validate_model(model, val_data, lookback, batch_size=1, return_weights=False):
    model.eval()
    num_sequences = len(val_data) - lookback - 1
    val_loader = prepare_dataloader(
        val_data,
        num_sequences=num_sequences,
        batch_size=batch_size,
        lookback=lookback,
        shuffle=False  # Chronological order
    )
    total_loss = 0.0
    mse_loss = torch.nn.MSELoss()
    all_beta_values = []
    all_weights = [] if return_weights else None
    
    with torch.no_grad():
        for batch_idx, (input_batch,) in enumerate(val_loader):
            apple_return_next_day = input_batch[:, lookback, 0]   # Shape: (batch_size,)
            sp500_return_next_day = input_batch[:, lookback, 1]   # Shape: (batch_size,)
            
            # Forward pass
            if return_weights:
                W, beta = model(input_batch[:, :lookback, :], return_weights=True)
                all_weights.append(W.cpu().numpy())
            else:
                beta = model(input_batch[:, :lookback, :])
            
            # Predict Apple return
            predicted_apple_return = beta.squeeze() * sp500_return_next_day
            
            # Compute loss
            loss = mse_loss(predicted_apple_return, apple_return_next_day)
            total_loss += loss.item()
            
            all_beta_values.append(beta.cpu().numpy())
        
    avg_loss = total_loss / len(val_loader)
    print(f"Validation/Test Loss: {avg_loss:.6f}")
    
    # Concatenate all beta values
    all_beta_values = np.concatenate(all_beta_values, axis=0)
    
    if return_weights:
        # Concatenate all W values
        all_weights = np.concatenate(all_weights, axis=0)  # Shape: (num_sequences, lookback)
        return avg_loss, all_beta_values, all_weights
    else:
        return avg_loss, all_beta_values

if __name__ == "__main__":
    # Parameters
    lookback = 256
    batch_size_train = 32
    epochs = 10
    num_sequences_train = len(train_data) - lookback - 1
    
    # Instantiate the model
    input_dim = 2
    model = BetaTransformer(input_dim=input_dim, lookback=lookback)
    
    # Define the optimizer
    optimizer = optim.Adam(model.parameters(), lr=1e-3)
    
    # Train the model
    train_model_on_returns(
        model,
        train_data,
        optimizer,
        epochs=epochs,
        lookback=lookback,
        batch_size=batch_size_train,
        num_sequences=num_sequences_train
    )
    
    # Validate the model
    validate_model(
        model,
        val_data,
        lookback=lookback,
        batch_size=1,  # You can adjust this
        return_weights=True
    )


import torch
import torch.optim as optim
import numpy as np

import torch
import torch.optim as optim
import numpy as np
import matplotlib.pyplot as plt

# Assume BetaTransformer and prepare_dataloader are already defined

def get_optimizer(model, learning_rate=1e-3):
    optimizer = optim.Adam(model.parameters(), lr=learning_rate)
    return optimizer

def train_model_on_returns(model, data, optimizer, epochs, batch_size, lookback, num_sequences):
    for epoch in range(epochs):
        model.train()
        train_loss = 0.0
        train_loader = prepare_dataloader(
            data, num_sequences=num_sequences, batch_size=batch_size,
            lookback=lookback, shuffle=True
        )
        
        for batch_idx, batch in enumerate(train_loader):
            batch = batch[0]
            input_batch = batch[:, :lookback, :]  # Shape: (batch_size, lookback, 2)
            apple_return_next_day = batch[:, lookback, 0]   # Shape: (batch_size,)
            sp500_return_next_day = batch[:, lookback, 1]   # Shape: (batch_size,)
            
            optimizer.zero_grad()
            
            # Forward pass
            beta = model(input_batch)  # Shape: (batch_size, 1)
            
            # Predict Apple return for the next day
            predicted_apple_return = beta.squeeze() * sp500_return_next_day  # Shape: (batch_size,)
            
            # Compute loss
            mse_loss = torch.nn.MSELoss()
            loss = mse_loss(predicted_apple_return, apple_return_next_day)
            
            # Backward pass and optimization
            loss.backward()
            optimizer.step()
            
            train_loss += loss.item()
        
        avg_train_loss = train_loss / len(train_loader)
        print(f"Epoch {epoch+1}, Train Loss: {avg_train_loss:.6f}")

def validate_model(model, val_data, lookback, batch_size=1, return_weights=False):
    model.eval()
    num_sequences = len(val_data) - lookback - 1
    val_loader = prepare_dataloader(
        val_data,
        num_sequences=num_sequences,
        batch_size=batch_size,
        lookback=lookback,
        shuffle=False
    )
    total_loss = 0.0
    mse_loss = torch.nn.MSELoss()
    all_beta_values = []
    all_weights = [] if return_weights else None
    
    with torch.no_grad():
        for batch_idx, (input_batch,) in enumerate(val_loader):
            apple_return_next_day = input_batch[:, lookback, 0]   # Shape: (batch_size,)
            sp500_return_next_day = input_batch[:, lookback, 1]   # Shape: (batch_size,)
            
            # Forward pass
            if return_weights:
                W, beta = model(input_batch[:, :lookback, :], return_weights=True)
                all_weights.append(W.cpu().numpy())
            else:
                beta = model(input_batch[:, :lookback, :])
            
            # Predict Apple return
            predicted_apple_return = beta.squeeze() * sp500_return_next_day
            
            # Compute loss
            loss = mse_loss(predicted_apple_return, apple_return_next_day)
            total_loss += loss.item()
            
            all_beta_values.append(beta.cpu().numpy())
        
    avg_loss = total_loss / len(val_loader)
    print(f"Validation/Test Loss: {avg_loss:.6f}")
    
    # Concatenate all beta values
    all_beta_values = np.concatenate(all_beta_values, axis=0)  # Shape: (num_sequences, 1)
    
    if return_weights:
        # Concatenate all W values
        all_weights = np.concatenate(all_weights, axis=0)  # Shape: (num_sequences, lookback)
        return avg_loss, all_beta_values, all_weights
    else:
        return avg_loss, all_beta_values

if __name__ == "__main__":
    # Parameters
    lookback = 256
    batch_size_train = 32
    epochs = 10
    num_sequences_train = len(train_data) - lookback - 1
    
    # Instantiate the model
    input_dim = 2
    model = BetaTransformer(input_dim=input_dim, lookback=lookback)
    
    # Define the optimizer
    optimizer = get_optimizer(model, learning_rate=1e-3)
    
    # Train the model
    train_model_on_returns(
        model,
        train_data,
        optimizer,
        epochs=epochs,
        lookback=lookback,
        batch_size=batch_size_train,
        num_sequences=num_sequences_train
    )
    
    # Validate the model and get beta values and weights
    avg_loss, all_beta_values, all_weights = validate_model(
        model,
        val_data,
        lookback=lookback,
        batch_size=1,  # You can adjust this
        return_weights=True
    )
    
    # Plot the estimated beta values
    plt.figure(figsize=(12, 6))
    plt.plot(all_beta_values, label='Estimated Beta')
    plt.title('Estimated Beta Values Over Time')
    plt.xlabel('Time')
    plt.ylabel('Beta Value')
    plt.legend()
    plt.grid(True)
    plt.show()
    
    # Plot the weights as a heatmap
    plt.figure(figsize=(12, 6))
    plt.imshow(all_weights.T, aspect='auto', cmap='viridis', origin='lower')
    plt.colorbar(label='Weight Value')
    plt.title('Weights Heatmap Over Time')
    plt.xlabel('Sequence Index')
    plt.ylabel('Lookback Time Step')
    plt.show()
